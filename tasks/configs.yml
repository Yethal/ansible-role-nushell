---
- name: Gather users home_dirs
  block:
    - name: Query homedirs
      ansible.builtin.getent:
        database: passwd

    - name: Query primary groups
      ansible.builtin.getent:
        database: group
        split: ':'

    - name: Set facts
      ansible.builtin.set_fact:
        home_dirs: >
          {%- set home_dirs = [] -%}
          {%- for user in nu_users -%}
            {{
              home_dirs.append({
                'user': user,
                'group': ansible_facts.getent_passwd[user][1],
                'homedir': ansible_facts.getent_passwd[user][4]
              })
            }}
          {%- endfor -%}
          {{ home_dirs }}

- name: Stat existing config files
  ansible.builtin.stat:
    path: "{{ item.homedir }}/{{ nushell_config_path }}/config.nu"
    get_attributes: false
    get_checksum: false
    get_mime: false
  loop: "{{ home_dirs }}"
  loop_control:
    label: "{{ item.homedir }}/{{ nushell_config_path }}/config.nu"
  register: config

- name: Set missing configs as fact
  ansible.builtin.set_fact:
    missing_configs: "{{ config.results if (overwrite_configs and (not install_status.skipped | default(false))) else (config.results | selectattr('stat.exists', 'equalto', false)) }}"

- name: Copy local configs to user directory
  ansible.builtin.copy:
    src: "{{ config_path | default('playbook_dir', true) }}/config.nu"
    dest: "{{ item.item.homedir }}/{{ nushell_config_path }}/"
    mode: "0644"
    owner: "{{ item.item.user }}"
    group: "{{ item.item.group }}"
  loop: "{{ missing_configs }}"
  loop_control:
    label: "{{ item.item.user }}"
  when: install_configs == 'local'

- name: Generate preset configs
  ansible.builtin.command:
    argv:
      - "{{ nushell_binary_path }}/nu"
      - -l -c "config reset --nu --without-backup"
  environment:
    XDG_CONFIG_HOME: /tmp
    HOME: /tmp
  changed_when: false
  when:
    - install_configs == 'remote'
    - missing_configs|length > 0
  notify:
    - "Remove temp configs"

- name: Copy remote configs
  ansible.builtin.copy:
    src: "/tmp/nushell/config.nu"
    dest: "{{ item.item.homedir }}/{{ nushell_config_path }}/"
    owner: "{{ item.item.user }}"
    group: "{{ item.item.group }}"
    mode: "0644"
    remote_src: true
  loop: "{{ missing_configs }}"
  loop_control:
    label: "{{ item.item.user }} config.nu"
  when:
    - install_configs == 'remote'
    - missing_configs|length > 0

- name: Configure nushell plugins
  ansible.builtin.include_tasks: plugins.yml
  when: install_plugins|bool

- name: Add nushell to .profile
  ansible.builtin.lineinfile:
    path: "{{ item.homedir }}/.profile"
    state: present
    line: "{{ nushell_binary_path }}/nu -l"
    owner: "{{ item.user }}"
    group: "{{ item.group }}"
    mode: "0750"
    create: true
  when: add_to_profile|bool
  loop: "{{ home_dirs }}"
  loop_control:
    label: "{{ item.user }}"

- name: Disable banner
  ansible.builtin.lineinfile:
    path: "{{ item.homedir }}/{{ nushell_config_path }}/config.nu"
    state: present
    regexp: "^\\$env\\.config\\.show_banner = (true|false)\\s*$"
    line: "$env.config.show_banner = false"
    validate: "{{ nushell_binary_path }}/nu -n -c 'source %s; $env.config'"
  when: disable_banner|bool
  loop: "{{ home_dirs }}"
  loop_control:
    label: "{{ item.user }}"

- name: Add hostname to nushell prompt
  ansible.builtin.lineinfile:
    path: "{{ item.homedir }}/{{ nushell_config_path }}/config.nu"
    regexp: "^.*PROMPT_INDICATOR.*$"
    line: "$env.PROMPT_INDICATOR = '({{ nu_hostname }})ã€‰'"
    validate: "{{ nushell_binary_path }}/nu -n -c 'source %s; $env'"
  when: add_hostname_to_prompt|bool
  loop: "{{ home_dirs }}"
  loop_control:
    label: "{{ item.user }}"
