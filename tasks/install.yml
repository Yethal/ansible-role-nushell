---
- name: Set correct libc flavor
  when: ansible_system == 'Linux'
  block:
    - name: Get libc version
      ansible.builtin.shell:
        cmd: "set -eu && ldd --version|grep ldd|cut -f4 -d ' '"
        executable: /bin/sh
      register: libc
      changed_when: false

    - name: Set libc flavor as fact
      ansible.builtin.set_fact:
        libc_flavor: "{{ 'gnu' if libc.stdout is version(min_glibc_version, '>=') else 'musl' }}"


- name: Set package variant as fact
  ansible.builtin.set_fact:
    nu_plugins: "{{ nu_plugins if (_nushell_version is version('0.93.0', '>=')) else (nu_plugins | difference(['nu_plugin_polars'])) }}"

- name: Set package name as fact
  ansible.builtin.set_fact:
    nushell_package: "nu-{{ _nushell_version }}-{{ arch_map[ansible_architecture] | default(ansible_architecture) }}-{{ 'unknown-linux-' + libc_flavor if ansible_system == 'Linux' else 'apple-darwin' }}"

- name: Extract package
  ansible.builtin.unarchive:
    src: "https://github.com/nushell/nushell/releases/download/{{ _nushell_version }}/{{ nushell_package }}.tar.gz"
    dest: "/tmp"
    remote_src: yes
  notify:
    - Remove download directory

- name: Move nushell binary to proper location
  become: true
  ansible.builtin.copy:
    src: "/tmp/{{ nushell_package }}/nu"
    dest: "{{ nushell_binary_path }}"
    owner: root
    group: "{{ 'root' if ansible_system == 'Linux' else 'wheel' }}"
    mode: 0751
    remote_src: yes

- name: Move nushell plugins to proper location
  become: true
  ansible.builtin.copy:
    src: "/tmp/{{ nushell_package }}/{{ item }}"
    dest: "{{ nushell_binary_path }}"
    owner: root
    group: "{{ 'root' if ansible_system == 'Linux' else 'wheel' }}"
    mode: 0751
    remote_src: yes
  loop: "{{ nu_plugins }}"
  loop_control:
    label: "{{ item }}"
  when: install_plugins|bool
