---
- name: Check if nushell is already installed
  ansible.builtin.stat:
    path: "{{ nushell_binary_path }}/nu"
    get_attributes: false
    get_checksum: false
    get_mime: false
  register: nushell_status

- name: Set latest nushell version as fact
  ansible.builtin.set_fact:
    _nushell_version: "{{ ((lookup('ansible.builtin.url', releases_endpoint + '/latest') | from_json).tag_name) if nushell_version == 'latest' else nushell_version }}"
  run_once: true

- name: Check if nushell requires update
  when: nushell_status.stat.exists
  block:
    - name: Check installed nushell version
      ansible.builtin.command:
        cmd: "{{ nushell_binary_path }}/nu --version"
      register: installed
      changed_when: False

    - name: Check installed nushell variant
      ansible.builtin.command:
        cmd: "{{ nushell_binary_path }}/nu -c 'version|get features'"
      register: features
      changed_when: false

    - name: Set installed nushell version and variant as fact
      ansible.builtin.set_fact:
        installed_version: "{{ installed.stdout }}"
        installed_variant: "{{ 'full' if 'dataframe' in features.stdout else 'default' }}"

- name: Install nushell version {{ _nushell_version }} {{ nushell_variant }}
  ansible.builtin.include_tasks: install.yml
  when: (not nushell_status.stat.exists) or (_nushell_version != installed_version) or (nushell_variant != installed_variant)
  register: install_status

- name: Install nushell configs
  ansible.builtin.include_tasks: configs.yml
  when: (install_configs != "none") and (nu_users|length > 0)

- name: Configure user shells
  ansible.builtin.include_tasks: shell.yml
  when: (set_shell|bool) and (nu_users|length > 0)
